/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package computernetworks;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author devineni
 */
public class Client extends javax.swing.JFrame {
    Socket socket = null;
    OutputStream os;
    InputStream is;
    DataInputStream dis;
    DataOutputStream dos;
    FileInputStream fis;
    FileOutputStream fos;
    OutputStreamWriter osw;
    InputStreamReader isw;
    BufferedWriter bw;
    BufferedReader br;
    ObjectOutputStream oos;
    ObjectInputStream ois;
    JFrame myFrame;
    GridLayout layout;
    JScrollPane scrollPane,scrollPane2;
    JPanel jp;
    JPanel jp2;
    JList client;
    JOptionPane jop;
    JList server;
    String pathname = "",serverpathname="",username,password;
    String files[] = null,filesfromserver[] = null;
    DefaultListModel listModelclient,listModelserver;
    /**
     * Creates new form LoginGUI
     */
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Host Name :");

        jLabel2.setText("Port Number :");

        jLabel3.setText("User Name :");

        jLabel4.setText("Password");

        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1)
                    .addComponent(jTextField2))
                .addGap(47, 47, 47))
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Loginbuttonclicked(evt);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
        if(!socket.isConnected())
        {
        System.exit(0);
        }
        else
        {
            bw.write("CLOSECONNECTION"+"\r\n");
            bw.write("USERNAME=" + username + "\r\n");
            bw.write("PASSWORD=" + password + "\r\n");
            bw.write("ENDOFREQUEST\r\n");
            bw.flush();
            socket.close();
            System.exit(0);
        }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    public void Loginbuttonclicked(java.awt.event.ActionEvent evt)
    {
        String hostname = jTextField1.getText();
        System.out.println(hostname);
        String portnumber = jTextField2.getText();
        System.out.println(portnumber);
        username = jTextField3.getText();
        System.out.println(username);
        password = jPasswordField1.getText();
        System.out.println(password);
        if(!hostname.isEmpty() && !username.isEmpty() && !password.isEmpty())
        {
            socket = getSocket(hostname,portnumber);
            try
            {
            System.out.println("get socket address "+ socket.getInetAddress());
            os = socket.getOutputStream();
            is = socket.getInputStream();
            dis = new DataInputStream(socket.getInputStream());
            ois = new ObjectInputStream(is);
            oos = new ObjectOutputStream(os);
            osw = new OutputStreamWriter(os);
            isw = new InputStreamReader(is);
            bw = new BufferedWriter(osw);
            br = new BufferedReader(isw);
            dos = new DataOutputStream(socket.getOutputStream());
            String sendMessage = "CREATE\n";
            bw.write(sendMessage);
            bw.write("USERNAME=" + username + "\r\n");
            bw.write("PASSWORD=" + password + "\r\n");
            bw.write("ENDOFREQUEST\r\n");
            bw.flush();
            String response = br.readLine();
            System.out.println("checking data from seerver "+response);
            jLabel5.setText(response);
            if(response.equals("STATUS=200"))
            {
               System.out.println("entered into session created");
               jLabel5.setText("Connection successfull"); 
               displayrootfilesystems();
            }
            else
            {
              jLabel5.setText("Session already exsists with same username and password");  
            }
            }
            catch(Exception e)
            {
                if(hostname.equals("toolman.wiu.edu"))
                {
                  jLabel5.setText("Port Number is wrong");
                }
                else
                {
                    jLabel5.setText("Host name is wrong");
                }
            }
        }
        else
        {
            jLabel5.setText("some information is missing either hostame or username or password");
        }
    }
    
    public void displayrootfilesystems()
    {
        System.out.println("dsc");
        myFrame = new JFrame("Files ");
myFrame.setLocation(100, 100);
myFrame.setSize(new Dimension(1024, 800));

GridLayout layout = new GridLayout(1, 1);
myFrame.setLayout(layout);
jp = new JPanel(new BorderLayout());
jp.setName("Client");
jp.setBackground(new Color(0x00FF00FF));
jp2 = new JPanel(new BorderLayout());
jp.setName("server");
jp2.setBackground(new Color(0x00000000));
scrollPane = new JScrollPane(jp,
            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
scrollPane2 = new JScrollPane(jp2,
            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
scrollPane.setPreferredSize(new Dimension(600, 600));
scrollPane2.setPreferredSize(new Dimension(600, 600));
myFrame.setVisible(true);

        //String filenamesfromserver[];
        File file = new File("C:/");
        pathname = "C:/";
        files = file.list();
        for(int i=0;i<files.length;i++)
        {
            System.out.println(files[i]);
        }
        try
        {
        
        filesfromserver = (String [])ois.readObject();
        serverpathname = (String) ois.readObject();
        listModelclient = new DefaultListModel();
        listModelserver = new DefaultListModel();
        for(int i=0;i<files.length;i++)
        {
            listModelclient.addElement(files[i]);
        }
        client = new JList(listModelclient);
        client.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent e)
            {
                JList listitem = (JList)e.getSource();
                System.out.println("clicked on "+listitem.getName());
                int index = listitem.locationToIndex(e.getPoint());
                if(e.getButton() == MouseEvent.BUTTON3)
                {
                    //int index = listitem.locationToIndex(e.getPoint());
                    boolean check = checkiffile(files[index]);
                    if(check)
                    {
                        System.out.println("upload button test");
                        JPopupMenu menu = new JPopupMenu();
                        JMenuItem upload = new JMenuItem("Upload");
                        menu.add(upload).addActionListener(new ActionListener()
                        {

                            @Override
                            public void actionPerformed(ActionEvent e) {
                                String command = e.getActionCommand();
                                System.out.println("action command is "+command);
                                //JMenuItem filename = (JMenuItem) e.getSource();
                                try
                                {
                                    System.out.println("upload path name ="+pathname+"\\"+files[index]);
                                    File f = new File(pathname+"\\"+files[index]);
                                    int numberofbytes;
                                    bw.write(command.toUpperCase()+"\r\n");
                                    bw.write("PATH=" + pathname + "\r\n");
                                    bw.write("FILENAME=" + f.getName() + "\r\n");
                                    bw.write("FILESIZE=" + f.length() + "\r\n");
                                    bw.write("PATHNAME=" + serverpathname + "\r\n");
                                    bw.write("ENDOFREQUEST\r\n");
                                    bw.flush();
                                    //System.out.println("after upload pathname "+br.readLine());
                                    if(!br.readLine().equals("FILEEXISTS"))
                                    {
                                    
                                    System.out.println("file not exists");
                                    byte packetdata[] = new byte[(int)f.length()];
                                    fis = new FileInputStream(f);
                                    //dos = new DataOutputStream(socket.getOutputStream());
                                    while((numberofbytes = fis.read(packetdata)) != -1)
                                    {
                                        dos.write(packetdata,0, packetdata.length);
                                    }
                                    //System.out.println("command after uploading "+br.readLine());
                                    refreshui();  
                                    }
                                    else
                                    {
                                        System.out.println("file exists " +command);
                                        int answer =  JOptionPane.showConfirmDialog(null, "File already exist,continue?","About file",JOptionPane.YES_NO_OPTION);
                                        if(answer == JOptionPane.YES_OPTION)
                                        {
                                    bw.write(command.toUpperCase()+"\r\n");
                                    bw.write("PATH=" + pathname + "\r\n");
                                    bw.write("FILENAME=" + f.getName() + "\r\n");
                                    bw.write("FILESIZE=" + f.length() + "\r\n");
                                    bw.write("PATHNAME=" + serverpathname + "\r\n");
                                    bw.write("OVERWRITE=" + "YES" + "\r\n");
                                    bw.write("ENDOFREQUEST\r\n");
                                    bw.flush();
                                   // String ok = br.readLine();
                                    //System.out.println("ok is "+ok);
                                    byte packetdata[] = new byte[(int)f.length()];
                                    fis = new FileInputStream(f);
                                    //dos = new DataOutputStream(socket.getOutputStream());
                                    while((numberofbytes = fis.read(packetdata)) != -1)
                                    {
                                        dos.write(packetdata,0, packetdata.length);
                                    }
                                    //System.out.println("command after uploading "+br.readLine());
                                    refreshui();  
                                        }
                                    }
                                   /* byte packetdata[] = new byte[(int)f.length()];
                                    fis = new FileInputStream(f);
                                    dos = new DataOutputStream(socket.getOutputStream());
                                    while((numberofbytes = fis.read(packetdata)) != -1)
                                    {
                                        dos.write(packetdata,0, packetdata.length);
                                    }
                                    //System.out.println("command after uploading "+br.readLine());
                                    refreshui();*/
                                }
                                catch(Exception e1)
                                {
                                    e1.printStackTrace();
                                }
                            }
                            
                        });
                        menu.show(client, e.getX(), e.getY());
                    }
                }
                
                if(e.getClickCount() == 2 && !checkiffile(files[index]))
                {
                    //int index = listitem.locationToIndex(e.getPoint());
                    if(files[index].equals(".."))
                    {
                        pathname = pathname+"/"+"..";
                        System.out.println("moving up one level "+pathname);
                    }
                    else
                    {
                    pathname = pathname +"/" +files[index];
                    }
                    System.out.println("path name is "+ pathname);
                    files = clickedonclient(pathname);
                    listModelclient.removeAllElements();
                    for(int i=0;i<files.length;i++)
                    {
                        listModelclient.addElement(files[i]);
                    }
                }
            }
        });
        for(int i=0;i<filesfromserver.length;i++)
        {
            listModelserver.addElement(filesfromserver[i]);
        }
        server = new JList(listModelserver);
        server.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent e)
            {
                JList listitem = (JList)e.getSource();
                int index = listitem.locationToIndex(e.getPoint());
                if(e.getButton() == MouseEvent.BUTTON3)
                {
                    //int index = listitem.locationToIndex(e.getPoint());
                    boolean check = checkiffile(filesfromserver[index]);
                    if(check)
                    {
                        System.out.println("Download button test");
                        JPopupMenu menu = new JPopupMenu();
                        JMenuItem download = new JMenuItem("Download");
                        menu.add(download).addActionListener(new ActionListener() {

                            @Override
                            public void actionPerformed(ActionEvent e) {
                                String command = e.getActionCommand();
                                System.out.println("action command is "+command);
                                //JMenuItem filename = (JMenuItem) e.getSource();
                                try
                                {
                                    System.out.println("download path name ="+serverpathname+"\\"+filesfromserver[index]);
                                    int numberofbytes;
                                    File f = new File(pathname+"/"+filesfromserver[index]);
                                    if(f.exists())
                                    {
                                        int answer =  JOptionPane.showConfirmDialog(null, "File already exist,continue?","About file",JOptionPane.YES_NO_OPTION);
                                        if(answer == JOptionPane.YES_OPTION)
                                        {
                                          bw.write(command.toUpperCase()+"\n");
                                    bw.write("PATHNAME=" + serverpathname + "\r\n");
                                    bw.write("FILENAME=" + filesfromserver[index] + "\r\n");
                                    bw.write("ENDOFREQUEST\r\n");
                                    bw.flush();
                                    int bytestoread = 0;
                                    String filesize,filesizes[];
                                    filesize = br.readLine();
                                    System.out.println("dowload file size is "+filesize);
                                    if(filesize.contains("="))
                                            {
                                               filesizes = filesize.split("=");
                                                if(filesizes[0].equals("FILESIZE"))
                                                {
                                                    bytestoread = Integer.parseInt(filesizes[1]);
                                                }
                                            }
                                    byte towrite[] = new byte[bytestoread];
                                    System.out.println("uploaded path name ="+pathname+"/"+filesfromserver[index]);
                                    f = new File(pathname+"/"+filesfromserver[index]);
                                   /* if(!f.exists())
                                    {
                                        f.createNewFile();
                                    }*/
                                    FileOutputStream fos = new FileOutputStream(f);
                                    dis.readFully(towrite);
                                    fos.write(towrite);
                                    //System.out.println("command after uploading "+br.readLine());
                                    refreshclientui();
                                    jp2.repaint(); 
                                        }
                                        else
                                        {
                                            refreshclientui();
                                            jp2.repaint(); 
                                        } 
                                    }
                                    else
                                    {
                                    bw.write(command.toUpperCase()+"\n");
                                    bw.write("PATHNAME=" + serverpathname + "\r\n");
                                    bw.write("FILENAME=" + filesfromserver[index] + "\r\n");
                                    bw.write("ENDOFREQUEST\r\n");
                                    bw.flush();
                                    int bytestoread = 0;
                                    String filesize,filesizes[];
                                    filesize = br.readLine();
                                    System.out.println("dowload file size is "+filesize);
                                    if(filesize.contains("="))
                                            {
                                               filesizes = filesize.split("=");
                                                if(filesizes[0].equals("FILESIZE"))
                                                {
                                                    bytestoread = Integer.parseInt(filesizes[1]);
                                                }
                                            }
                                    byte towrite[] = new byte[bytestoread];
                                    System.out.println("uploaded path name ="+pathname+"/"+filesfromserver[index]);
                                    f = new File(pathname+"/"+filesfromserver[index]);
                                    if(f.createNewFile())
                                    {
                                    FileOutputStream fos = new FileOutputStream(f);
                                    dis.readFully(towrite);
                                    fos.write(towrite);
                                    //System.out.println("command after uploading "+br.readLine());
                                    refreshclientui();
                                    jp2.repaint();  
                                    }
                                    }
                                }
                                catch(Exception e1)
                                {
                                    e1.printStackTrace();
                                }
                             //To change body of generated methods, choose Tools | Templates.
                            }
                        });
                        menu.show(server, e.getX(), e.getY());
                    }
                }
                if(e.getClickCount() == 2)
                {
                     //int index = listitem.locationToIndex(e.getPoint());
                    if(filesfromserver[index].equals(".."))
                    {
                        serverpathname = serverpathname+"/"+"..";
                        System.out.println("moving up one level "+pathname);
                    }
                    else
                    {
                    serverpathname = serverpathname +"/" +filesfromserver[index];
                    }
                    System.out.println("path name is "+ serverpathname);
                    filesfromserver = clickedonserver(serverpathname);
                    listModelserver.removeAllElements();
                    for(int i=0;i<filesfromserver.length;i++)
                    {
                        listModelserver.addElement(filesfromserver[i]);
                    }
                }
            }
        });
        client.setVisible(true);
        server.setVisible(true);
        jp.add(client);
        jp2.add(server);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        JSplitPane splitpane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,jp,jp2);
        splitpane.setOneTouchExpandable(true);
        splitpane.setDividerLocation(150);
        myFrame.add(splitpane);
    }
    
    public String[] clickedonclient(String pathname)
    {
        //System.out.println("path name is "+ pathname);
        //System.out.println(("entered clicked client with " + rootfile));
        String filenames[];
        System.out.println("inside client clicked on");
        System.out.println("it is absolute");
        File f =  new File(pathname);
        //String newpathname = pathname+rootfile;
        filenames = f.list();
        String dupfilenames[] = new String[filenames.length+1];
        dupfilenames[0] = "..";
        for(int i=0;i<filenames.length;i++)
        {
            dupfilenames[i+1] = filenames[i];
        }
        return dupfilenames;
         /*  client = new JList(filenames);
           client.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent e)
            {
                JList listitem = (JList)e.getSource();
                if(e.getButton() == MouseEvent.BUTTON3)
                {
                    int index = listitem.locationToIndex(e.getPoint());
                    boolean check = checkiffile(filenames[index]);
                    if(check)
                    {
                        System.out.println("upload button test");
                        JPopupMenu menu = new JPopupMenu();
                        JMenuItem upload = new JMenuItem("Upload");
                        menu.add(upload);
                        listitem.add(menu);
                    }
                }
                if(e.getClickCount() == 2)
                {
                    int index = listitem.locationToIndex(e.getPoint());
                    clickedonclient(filenames[index],newpathname);
                    
                }
            }
        });
          client.setVisible(true);
          jp.add(client);
          myFrame.add(jp);
       */
    }
    
    public void refreshui()
    {
        System.out.println("inside refresh ui");
       try
       {
       filesfromserver = (String [])ois.readObject();
       serverpathname = (String) ois.readObject();
       listModelserver.removeAllElements();
       for(int i=0;i<filesfromserver.length;i++)
                    {
                        listModelserver.addElement(filesfromserver[i]);
                    }
       jp.repaint();
       }
       catch(Exception e)
       {
           e.printStackTrace();
       }
    }
    
    public void refreshclientui()
    {
        String filenames[];
        String dupfilenames[];
       /*filesfromserver = (String [])ois.readObject();
       serverpathname = (String) ois.readObject();*/
        try
        {
            File f = new File(pathname);
            filenames = f.list();
            dupfilenames = new String[filenames.length +1];
           dupfilenames[0] = "..";
            listModelclient.removeAllElements();
           listModelclient.addElement(dupfilenames[0]);
            for(int i=0;i<filenames.length;i++)
            {
                System.out.println("files from server "+filenames[i]);
                dupfilenames[i] = filenames[i];
                listModelclient.addElement(dupfilenames[i]);
            }
            jp.repaint();
        }
        catch(Exception e)
        {
         e.printStackTrace();
        }
    }
    public String[] clickedonserver(String pathname)
    {
        String filesfromserver[] = null;
        System.out.println("inside server clicked on");
        String sendMessage = "LIST\n";
        try
        {
        bw.write(sendMessage);
        bw.write("USERNAME=" + username + "\r\n");
        bw.write("PATHNAME=" + pathname + "\r\n");
        bw.write("ENDOFREQUEST\r\n");
        bw.flush();
        filesfromserver = (String []) ois.readObject();
        serverpathname = (String) ois.readObject();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return filesfromserver;
    }
    public boolean checkiffile(String file)
    {
        if(file.contains(".") && !file.contains(".."))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public Socket getSocket(String hostname,String portnumber)
    {
       Socket newsocket = null;
       try
       {
       InetAddress inet = null;
       int port = Integer.parseInt(portnumber);
       InetAddress inet1 = inet.getByName(hostname);
       System.out.println("getting by name : " +inet1);
       newsocket = new Socket(inet1,port);   
       }
       catch(Exception e)
       {
           e.printStackTrace();
       }
       return newsocket;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
